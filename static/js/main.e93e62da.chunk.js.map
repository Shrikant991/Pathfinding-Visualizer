{"version":3,"sources":["components/DataStructures/GraphHelper.js","components/DataStructures/Queue.js","components/Path/BreadthFirstSearch.js","components/Path/DepthFirstSearch.js","components/DataStructures/PriorityQueue.js","components/Path/Path.js","components/Path/Dijkstra.js","components/Path/Astar.js","components/Maze/RecursiveDivision.js","components/Maze/Maze.js","components/Maze/RandomizedVerticals.js","components/Maze/RandomizedHorizontals.js","components/GraphSketch.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["GraphHelper","graph","returnNeighbours","index","result","i","j","currentCell","neighbour","weight","push","cols","rows","this","length","Queue","enqueue","data","queue","dequeue","splice","isEmpty","BreadthFirstSearch","maze","start","end","graphHelper","distances","parentTracking","row","parentRow","order","finalDistance","currNode","currDistance","currNeighbours","currNeighbour","itr","shortestPath","traversalOrder","distance","DepthFirstSearch","stack","visited","visitedRow","pop","PriorityQueue","comparator","heap","heapSize","parent","parseInt","temp","minimum","siftDown","minIndex","key","value","heapify","Dijkstra","pQueue","x","currNeighbourIndex","heapIndex","findElement","element","update","Astar","heuristic","calculateHeuristic","endCoords","Math","abs","none","RecursiveDivision","RandomizedVerticals","grid","lines","holes","currHoleI","random","RandomizedHorizontals","randomNumber","min","max","floor","checkInside","array","divide","horizontal","diff","y","minX","maxX","hole","addHorizontalWall","minY","maxY","addVerticalWall","Graph","props","setup","p5","canvasParentRef","width","windowWidth","height","windowHeight","mazeHeight","mazeWidth","mazeHeightUnit","mazeWidthUnit","createCanvas","initGrid","place","empty","startPlaced","startCoords","endPlaced","animated","iPrev","jPrev","calculateIndex","X","Y","colourBox","fillValue","fill","rect","placeStartOnClick","mouseX","mouseY","placeEndOnClick","placeMazeWall","placeMazeWallOnClick","placeWeightOnClick","animatePathFinding","colour1","colour2","frameRate","setTimeout","animateMazeWalls","clearSketch","clearAnimation","touchStarted","objectDraw","object","draw","returnClear","returnClearAnimation","returnFindPath","traversalInfo","PathAlgorithms","pathAlgorithm","getDistance","returnGenerateMaze","mazeOrder","MazeAlgorithms","mazeAlgorithm","render","className","wall","Component","CustomNavbar","state","selectedObject","selectedMazeAlgorithm","selectedPathAlgorithm","Navbar","class","style","Container","Col","Dropdown","variant","Toggle","id","Menu","map","Item","onClick","getObject","toLowerCase","setState","as","ButtonGroup","Button","generateMaze","split","getMazeAlgorithm","replace","findPath","getShortPathAlgorithm","Badge","App","clear","bind","React","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e93e62da.chunk.js","sourcesContent":["// class with methods to convert the 2D array into a graph\r\nclass GraphHelper {\r\n  constructor(graph) {\r\n    this.graph = graph;\r\n    this.rows = graph.length;\r\n    this.cols = graph[0].length;\r\n  }\r\n\r\n  // return neighbours of cell with given index\r\n  returnNeighbours = index => {\r\n    var result = [];\r\n\r\n    let i = index[0],\r\n      j = index[1];\r\n    let currentCell = this.graph[i][j];\r\n\r\n    if (i - 1 >= 1) {\r\n      let neighbour = this.graph[i - 1][j];\r\n      let weight = false;\r\n      if (neighbour === 0 || neighbour === 4) {\r\n        weight = 1;\r\n      }\r\n      if (neighbour === 5 || (currentCell === 5 && neighbour !== 2)) {\r\n        weight = 5;\r\n      }\r\n      if (weight) {\r\n        result.push({\r\n          neighbour: [i - 1, j],\r\n          weight: weight\r\n        });\r\n      }\r\n    }\r\n\r\n    if (j - 1 >= 1) {\r\n      let neighbour = this.graph[i][j - 1];\r\n      let weight = false;\r\n      if (neighbour === 0 || neighbour === 4) {\r\n        weight = 1;\r\n      }\r\n      if (neighbour === 5 || (currentCell === 5 && neighbour !== 2)) {\r\n        weight = 5;\r\n      }\r\n      if (weight) {\r\n        result.push({\r\n          neighbour: [i, j - 1],\r\n          weight: weight\r\n        });\r\n      }\r\n    }\r\n\r\n    if (j + 1 < this.cols - 1) {\r\n      let neighbour = this.graph[i][j + 1];\r\n      let weight = false;\r\n      if (neighbour === 0 || neighbour === 4) {\r\n        weight = 1;\r\n      }\r\n      if (neighbour === 5 || (currentCell === 5 && neighbour !== 2)) {\r\n        weight = 5;\r\n      }\r\n      if (weight) {\r\n        result.push({\r\n          neighbour: [i, j + 1],\r\n          weight: weight\r\n        });\r\n      }\r\n    }\r\n\r\n    if (i + 1 < this.rows - 1) {\r\n      let neighbour = this.graph[i + 1][j];\r\n      let weight = false;\r\n      if (neighbour === 0 || neighbour === 4) {\r\n        weight = 1;\r\n      }\r\n      if (neighbour === 5 || (currentCell === 5 && neighbour !== 2)) {\r\n        weight = 5;\r\n      }\r\n      if (weight) {\r\n        result.push({\r\n          neighbour: [i + 1, j],\r\n          weight: weight\r\n        });\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n\r\nexport default GraphHelper;\r\n","class Queue {\r\n  constructor() {\r\n    this.queue = [];\r\n  }\r\n  enqueue = data => {\r\n    this.queue.push(data);\r\n  };\r\n  dequeue = () => {\r\n    return this.queue.splice(0, 1)[0];\r\n  };\r\n  isEmpty = () => {\r\n    return this.queue.length === 0;\r\n  };\r\n}\r\n\r\nexport default Queue;\r\n","import GraphHelper from \"../DataStructures/GraphHelper\";\r\nimport Queue from \"../DataStructures/Queue\";\r\n\r\n// function will return the order in which nodes are traversed during BFS\r\nfunction BreadthFirstSearch(maze, start, end) {\r\n  var queue = new Queue();\r\n  var rows = maze.length;\r\n  var cols = maze[0].length;\r\n  var graphHelper = new GraphHelper(maze);\r\n\r\n  // making the distances and tracking array\r\n  var distances = [];\r\n  var parentTracking = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    let row = [];\r\n    let parentRow = [];\r\n    for (let j = 0; j < cols; j++) {\r\n      row.push(-1);\r\n      parentRow.push(false);\r\n    }\r\n    parentTracking.push(parentRow);\r\n    distances.push(row);\r\n  }\r\n\r\n  // BFS\r\n  var order = [];\r\n  var finalDistance = -1;\r\n  distances[start[0]][start[1]] = 0;\r\n  queue.enqueue(start);\r\n  while (!queue.isEmpty()) {\r\n    var currNode = queue.dequeue();\r\n    var currDistance = distances[currNode[0]][currNode[1]];\r\n    if (currNode[0] !== end[0] || currNode[1] !== end[1]) {\r\n      var currNeighbours = graphHelper.returnNeighbours(currNode);\r\n      for (let i = currNeighbours.length - 1; i >= 0; i--) {\r\n        let currNeighbour = currNeighbours[i].neighbour;\r\n        if (distances[currNeighbour[0]][currNeighbour[1]] === -1) {\r\n          queue.enqueue(currNeighbour);\r\n          distances[currNeighbour[0]][currNeighbour[1]] = currDistance + 1;\r\n          parentTracking[currNeighbour[0]][currNeighbour[1]] = currNode;\r\n        }\r\n      }\r\n      order.push(currNode);\r\n    } else {\r\n      finalDistance = currDistance;\r\n      break;\r\n    }\r\n  }\r\n\r\n  // finding the shortest path\r\n  var itr = parentTracking[end[0]][end[1]];\r\n  var shortestPath = [end];\r\n  while (itr) {\r\n    shortestPath.push(itr);\r\n    itr = parentTracking[itr[0]][itr[1]];\r\n  }\r\n\r\n  // returning the exploration order, shortest path accoding to algorithm and distance\r\n  return {\r\n    traversalOrder: order,\r\n    shortestPath: shortestPath,\r\n    distance: finalDistance\r\n  };\r\n}\r\n\r\nexport default BreadthFirstSearch;\r\n","import GraphHelper from \"../DataStructures/GraphHelper\";\r\n// import Stack from \"../DataStructures/Stack\";\r\n\r\n// function will return the order in which nodes are traversed during DFS\r\nfunction DepthFirstSearch(maze, start, end) {\r\n  var stack = [];\r\n  var rows = maze.length;\r\n  var cols = maze[0].length;\r\n  var graphHelper = new GraphHelper(maze);\r\n\r\n  // making the distances and tracking array\r\n  var distances = [];\r\n  var parentTracking = [];\r\n  var visited = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    let row = [];\r\n    let parentRow = [];\r\n    let visitedRow = [];\r\n    for (let j = 0; j < cols; j++) {\r\n      row.push(-1);\r\n      parentRow.push(false);\r\n      visitedRow.push(false);\r\n    }\r\n    parentTracking.push(parentRow);\r\n    distances.push(row);\r\n    visited.push(visitedRow);\r\n  }\r\n\r\n  // DFS\r\n  var order = [];\r\n  var finalDistance = -1;\r\n  distances[start[0]][start[1]] = 0;\r\n  stack.push(start);\r\n  while (stack.length !== 0) {\r\n    var currNode = stack.pop();\r\n    var currDistance = distances[currNode[0]][currNode[1]];\r\n    if (!visited[currNode[0]][currNode[1]]) {\r\n      visited[currNode[0]][currNode[1]] = true;\r\n\r\n      if (currNode[0] !== end[0] || currNode[1] !== end[1]) {\r\n        var currNeighbours = graphHelper.returnNeighbours(currNode);\r\n\r\n        for (let i = currNeighbours.length - 1; i >= 0; i--) {\r\n          let currNeighbour = currNeighbours[i].neighbour;\r\n\r\n          if (!visited[currNeighbour[0]][currNeighbour[1]]) {\r\n            stack.push(currNeighbour);\r\n\r\n            distances[currNeighbour[0]][currNeighbour[1]] = currDistance + 1;\r\n            parentTracking[currNeighbour[0]][currNeighbour[1]] = currNode;\r\n          }\r\n        }\r\n\r\n        order.push(currNode);\r\n      } else {\r\n        finalDistance = currDistance;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // finding the shortest path\r\n  var itr = parentTracking[end[0]][end[1]];\r\n  var shortestPath = [end];\r\n  while (itr) {\r\n    shortestPath.push(itr);\r\n    itr = parentTracking[itr[0]][itr[1]];\r\n  }\r\n\r\n  // returning the exploration order, shortest path accoding to algorithm and distance\r\n  return {\r\n    traversalOrder: order,\r\n    shortestPath: shortestPath,\r\n    distance: finalDistance\r\n  };\r\n}\r\n\r\nexport default DepthFirstSearch;\r\n","// heap implementation of a priority queue with some additional functionality for updating values in the pq\r\nclass PriorityQueue {\r\n  constructor(comparator) {\r\n    this.heap = [];\r\n    this.heapSize = 0;\r\n    this.comparator = comparator;\r\n  }\r\n  enqueue = data => {\r\n    this.heap.push(data);\r\n    this.heapSize++;\r\n    let i = this.heapSize - 1;\r\n\r\n    while (i > 0) {\r\n      let parent = parseInt((i - 1) / 2);\r\n      if (this.comparator(this.heap[i]) > this.comparator(this.heap[parent])) {\r\n        break;\r\n      } else {\r\n        let temp = this.heap[i];\r\n        this.heap[i] = this.heap[parent];\r\n        this.heap[parent] = temp;\r\n        i = parent;\r\n      }\r\n    }\r\n  };\r\n\r\n  dequeue = () => {\r\n    let minimum = this.heap[0];\r\n    if (this.heapSize !== 1) {\r\n      this.heap[0] = this.heap.pop();\r\n      this.heapSize--;\r\n      this.siftDown(0);\r\n    } else if (this.heapSize === 1) {\r\n      this.heap = [];\r\n      this.heapSize--;\r\n    }\r\n\r\n    return minimum;\r\n  };\r\n\r\n  siftDown(i) {\r\n    while (i < this.heapSize) {\r\n      let minIndex;\r\n      if (2 * i + 1 >= this.heapSize) {\r\n        break;\r\n      }\r\n      if (2 * i + 2 >= this.heapSize) {\r\n        minIndex = 2 * i + 1;\r\n      } else if (\r\n        this.comparator(this.heap[2 * i + 1]) <\r\n        this.comparator(this.heap[2 * i + 2])\r\n      ) {\r\n        minIndex = 2 * i + 1;\r\n      } else {\r\n        minIndex = 2 * i + 2;\r\n      }\r\n\r\n      if (\r\n        this.comparator(this.heap[minIndex]) < this.comparator(this.heap[i])\r\n      ) {\r\n        let temp = this.heap[minIndex];\r\n        this.heap[minIndex] = this.heap[i];\r\n        this.heap[i] = temp;\r\n        i = minIndex;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  heapify() {\r\n    for (let i = this.heapSize - 1; i >= 0; i--) {\r\n      this.siftDown(i);\r\n    }\r\n  }\r\n\r\n  findElement(key) {\r\n    for (let i = 0; i < this.heapSize; i++) {\r\n      if (key(this.heap[i])) {\r\n        return i;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  update(index, value) {\r\n    this.heap[index] = value;\r\n    this.heapify();\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.heapSize === 0;\r\n  }\r\n}\r\n\r\nexport default PriorityQueue;\r\n","import BreadthFirstSearch from \"./BreadthFirstSearch\";\r\nimport DepthFirstSearch from \"./DepthFirstSearch\";\r\nimport Dijkstra from \"./Dijkstra\";\r\nimport Astar from \"./Astar\";\r\n\r\n// wrapper json for all functionality\r\nexport default {\r\n  BreadthFirstSearch: BreadthFirstSearch,\r\n  DepthFirstSearch: DepthFirstSearch,\r\n  Dijkstra: Dijkstra,\r\n  Astar: Astar,\r\n  none: function() {}\r\n};\r\n","import GraphHelper from \"../DataStructures/GraphHelper\";\r\nimport PriorityQueue from \"../DataStructures/PriorityQueue\";\r\n\r\nexport default function dijkstra(maze, start, end) {\r\n  var pQueue = new PriorityQueue(function(x) {\r\n    return x.distance;\r\n  });\r\n  var rows = maze.length;\r\n  var cols = maze[0].length;\r\n  var graphHelper = new GraphHelper(maze);\r\n\r\n  // making the distances and tracking array\r\n  var distances = [];\r\n  var parentTracking = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    let row = [];\r\n    let parentRow = [];\r\n    for (let j = 0; j < cols; j++) {\r\n      row.push(-1);\r\n      parentRow.push(false);\r\n    }\r\n    parentTracking.push(parentRow);\r\n    distances.push(row);\r\n  }\r\n\r\n  var order = [];\r\n  var finalDistance = -1;\r\n  distances[start[0]][start[1]] = 0;\r\n  // store\r\n  // {\r\n  //  index:[],\r\n  //  distance:[]\r\n  // }\r\n  pQueue.enqueue({\r\n    index: start,\r\n    distance: 0\r\n  });\r\n  while (!pQueue.isEmpty()) {\r\n    var currNode = pQueue.dequeue();\r\n\r\n    order.push(currNode.index);\r\n    var currDistance = distances[currNode.index[0]][currNode.index[1]];\r\n    if (currNode.index[0] !== end[0] || currNode.index[1] !== end[1]) {\r\n      var currNeighbours = graphHelper.returnNeighbours(currNode.index);\r\n\r\n      for (let i = 0; i <= currNeighbours.length - 1; i++) {\r\n        let currNeighbour = currNeighbours[i];\r\n        let currNeighbourIndex = currNeighbour.neighbour;\r\n\r\n        if (distances[currNeighbourIndex[0]][currNeighbourIndex[1]] === -1) {\r\n          pQueue.enqueue({\r\n            index: currNeighbourIndex,\r\n            distance: currDistance + currNeighbour.weight\r\n          });\r\n\r\n          distances[currNeighbourIndex[0]][currNeighbourIndex[1]] =\r\n            currDistance + currNeighbour.weight;\r\n          parentTracking[currNeighbourIndex[0]][currNeighbourIndex[1]] =\r\n            currNode.index;\r\n        } else if (\r\n          distances[currNeighbourIndex[0]][currNeighbourIndex[1]] >\r\n          currDistance + currNeighbour.weight\r\n        ) {\r\n          let heapIndex = pQueue.findElement(function(element) {\r\n            return (\r\n              element.index[0] === currNeighbourIndex[0] &&\r\n              element.index[1] === currNeighbourIndex[1]\r\n            );\r\n          });\r\n          if (heapIndex) {\r\n            pQueue.update(heapIndex, {\r\n              index: currNeighbourIndex,\r\n              distance: currDistance + currNeighbour.weight\r\n            });\r\n            distances[currNeighbourIndex[0]][currNeighbourIndex[1]] =\r\n              currDistance + currNeighbour.weight;\r\n            parentTracking[currNeighbourIndex[0]][currNeighbourIndex[1]] =\r\n              currNode.index;\r\n          }\r\n        }\r\n      }\r\n      //\r\n    } else {\r\n      finalDistance = currDistance;\r\n      break;\r\n    }\r\n  }\r\n\r\n  // finding the shortest path\r\n  var itr = parentTracking[end[0]][end[1]];\r\n  var shortestPath = [end];\r\n  while (itr) {\r\n    shortestPath.push(itr);\r\n    itr = parentTracking[itr[0]][itr[1]];\r\n  }\r\n\r\n  // returning the exploration order, shortest path accoding to algorithm and distance\r\n  return {\r\n    traversalOrder: order,\r\n    shortestPath: shortestPath,\r\n    distance: finalDistance\r\n  };\r\n}\r\n","import GraphHelper from \"../DataStructures/GraphHelper\";\r\nimport PriorityQueue from \"../DataStructures/PriorityQueue\";\r\n\r\nexport default function dijkstra(maze, start, end) {\r\n  var pQueue = new PriorityQueue(function(x) {\r\n    return x.heuristic;\r\n  });\r\n  var rows = maze.length;\r\n  var cols = maze[0].length;\r\n  var graphHelper = new GraphHelper(maze);\r\n\r\n  // making the distances and tracking array\r\n  var distances = [];\r\n  var parentTracking = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    let row = [];\r\n    let parentRow = [];\r\n    for (let j = 0; j < cols; j++) {\r\n      row.push(-1);\r\n      parentRow.push(false);\r\n    }\r\n    parentTracking.push(parentRow);\r\n    distances.push(row);\r\n  }\r\n\r\n  var order = [];\r\n  var finalDistance = -1;\r\n  distances[start[0]][start[1]] = 0;\r\n\r\n  pQueue.enqueue({\r\n    index: start,\r\n    distance: 0,\r\n    heuristic: 0\r\n  });\r\n\r\n  function calculateHeuristic(index, endCoords) {\r\n    let x = Math.abs(index[0] - endCoords[0]);\r\n    let y = Math.abs(index[1] - endCoords[1]);\r\n    return x + y;\r\n  }\r\n\r\n  while (!pQueue.isEmpty()) {\r\n    var currNode = pQueue.dequeue();\r\n\r\n    order.push(currNode.index);\r\n    var currDistance = distances[currNode.index[0]][currNode.index[1]];\r\n    if (currNode.index[0] !== end[0] || currNode.index[1] !== end[1]) {\r\n      var currNeighbours = graphHelper.returnNeighbours(currNode.index);\r\n\r\n      for (let i = 0; i <= currNeighbours.length - 1; i++) {\r\n        let currNeighbour = currNeighbours[i];\r\n        let currNeighbourIndex = currNeighbour.neighbour;\r\n\r\n        if (distances[currNeighbourIndex[0]][currNeighbourIndex[1]] === -1) {\r\n          pQueue.enqueue({\r\n            index: currNeighbourIndex,\r\n            distance: currDistance + currNeighbour.weight,\r\n            heuristic:\r\n              currDistance +\r\n              currNeighbour.weight +\r\n              calculateHeuristic(currNeighbourIndex, end)\r\n          });\r\n\r\n          distances[currNeighbourIndex[0]][currNeighbourIndex[1]] =\r\n            currDistance + currNeighbour.weight;\r\n          parentTracking[currNeighbourIndex[0]][currNeighbourIndex[1]] =\r\n            currNode.index;\r\n        } else if (\r\n          distances[currNeighbourIndex[0]][currNeighbourIndex[1]] >\r\n          currDistance + currNeighbour.weight\r\n        ) {\r\n          let heapIndex = pQueue.findElement(function(element) {\r\n            return (\r\n              element.index[0] === currNeighbourIndex[0] &&\r\n              element.index[1] === currNeighbourIndex[1]\r\n            );\r\n          });\r\n          if (heapIndex) {\r\n            pQueue.update(heapIndex, {\r\n              index: currNeighbourIndex,\r\n              distance: currDistance + currNeighbour.weight,\r\n              heuristic:\r\n                currDistance +\r\n                currNeighbour.weight +\r\n                calculateHeuristic(currNeighbourIndex, end)\r\n            });\r\n            distances[currNeighbourIndex[0]][currNeighbourIndex[1]] =\r\n              currDistance + currNeighbour.weight;\r\n            parentTracking[currNeighbourIndex[0]][currNeighbourIndex[1]] =\r\n              currNode.index;\r\n          }\r\n        }\r\n      }\r\n      //\r\n    } else {\r\n      finalDistance = currDistance;\r\n      break;\r\n    }\r\n  }\r\n\r\n  // finding the shortest path\r\n  var itr = parentTracking[end[0]][end[1]];\r\n  var shortestPath = [end];\r\n  while (itr) {\r\n    shortestPath.push(itr);\r\n\r\n    itr = parentTracking[itr[0]][itr[1]];\r\n  }\r\n\r\n  // returning the exploration order, shortest path accoding to algorithm and distance\r\n  return {\r\n    traversalOrder: order,\r\n    shortestPath: shortestPath,\r\n    distance: finalDistance\r\n  };\r\n}\r\n","function RecursiveDivision(grid) {\r\n  let order = [];\r\n  function randomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n  function checkInside(array, element) {\r\n    for (let i = 0; i < array.length; i++) {\r\n      if (array[i][0] === element[0] && array[i][1] === element[1]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function addHorizontalWall(minX, maxX, y) {\r\n    var hole = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\r\n\r\n    for (var i = minX; i <= maxX; i++) {\r\n      if (i !== hole && !checkInside(order, [i, y])) order.push([i, y]);\r\n    }\r\n  }\r\n  function addVerticalWall(minY, maxY, x) {\r\n    var hole = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\r\n\r\n    for (var i = minY; i <= maxY; i++) {\r\n      if (i !== hole && !checkInside(order, [x, i])) order.push([x, i]);\r\n    }\r\n  }\r\n\r\n  function divide(grid, horizontal, start, end) {\r\n    let diff = [end[0] - start[0], end[1] - start[1]];\r\n\r\n    if (horizontal) {\r\n      if (diff[0] < 1) {\r\n        return;\r\n      }\r\n      var y = Math.floor(randomNumber(start[1], end[1]) / 2) * 2;\r\n      addHorizontalWall(start[0], end[0], y);\r\n      divide(grid, !horizontal, start, [end[0], y - 1]);\r\n      divide(grid, !horizontal, [start[0], y + 1], end);\r\n    } else {\r\n      if (diff[1] < 1) {\r\n        return;\r\n      }\r\n      var x = Math.floor(randomNumber(start[0], end[0]) / 2) * 2;\r\n      addVerticalWall(start[1], end[1], x);\r\n      divide(grid, !horizontal, start, [x - 1, end[1]]);\r\n      divide(grid, !horizontal, [x + 1, start[1]], end);\r\n    }\r\n  }\r\n\r\n  divide(grid, false, [1, 1], [grid.length - 2, grid[0].length - 2]);\r\n  return order;\r\n}\r\n\r\nexport default RecursiveDivision;\r\n","import RandomizedVerticals from \"./RandomizedVerticals\";\r\nimport RandomizedHorizontals from \"./RandomizedHorizontals\";\r\nimport RecursiveDivision from \"./RecursiveDivision\";\r\nexport default {\r\n  RandomizedVerticals: RandomizedVerticals,\r\n  RandomizedHorizontals: RandomizedHorizontals,\r\n  RecursiveDivision: RecursiveDivision,\r\n  none: function() {}\r\n};\r\n","function RandomizedVerticals(grid) {\r\n  var rows = grid.length;\r\n  var cols = grid[0].length;\r\n  var lines = parseInt((cols - 2) / 2);\r\n  var holes = [];\r\n  for (let i = 0; i < lines; i++) {\r\n    var currHoleI = parseInt(Math.random() * (rows - 2) + 1);\r\n    holes.push(currHoleI);\r\n  }\r\n  var result = [];\r\n  for (let i = 0; i < holes.length; i++) {\r\n    for (let j = 1; j < rows - 1; j++) {\r\n      if (j !== holes[i]) {\r\n        result.push([j, 2 * i + 2]);\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\nexport default RandomizedVerticals;\r\n","function RandomizedHorizontals(grid) {\r\n  var rows = grid.length;\r\n  var cols = grid[0].length;\r\n\r\n  var lines = parseInt((rows - 2) / 2);\r\n  var holes = [];\r\n  for (let i = 0; i < lines; i++) {\r\n    var currHoleI = parseInt(Math.random() * (cols - 2) + 1);\r\n    holes.push(currHoleI);\r\n  }\r\n  var result = [];\r\n  for (let i = 0; i < holes.length; i++) {\r\n    for (let j = 1; j < cols - 1; j++) {\r\n      if (j !== holes[i]) {\r\n        result.push([2 * i + 2, j]);\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\nexport default RandomizedHorizontals;\r\n","import React, { Component } from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\nimport PathAlgorithms from \"./Path/Path\";\r\nimport MazeAlgorithms from \"./Maze/Maze\";\r\n\r\n// The graph is going to be stored as a 2D array, with the following values having the\r\n// 0-> free\r\n// 1-> start\r\n// 2-> maze wall\r\n// 3-> border wall\r\n// 4-> end\r\n// 5-> weighted node\r\n\r\nexport default class Graph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.objectDraw = {\r\n      start: this.placeStartOnClick,\r\n      end: this.placeEndOnClick,\r\n      wall: this.placeMazeWallOnClick,\r\n      weight: this.placeWeightOnClick,\r\n      none: this.empty\r\n    };\r\n  }\r\n\r\n  setup = (p5, canvasParentRef) => {\r\n    this.width = p5.windowWidth * 1; //pixels\r\n    this.height = p5.windowHeight * 0.89; //pixels\r\n    this.mazeHeight = 40; //units\r\n    this.mazeWidth = 80; //units\r\n    this.mazeHeightUnit = this.height / this.mazeHeight; // pixels/unit\r\n    this.mazeWidthUnit = this.width / this.mazeWidth; // pixels/unit\r\n    p5.createCanvas(this.width, this.height).parent(canvasParentRef);\r\n    this.initGrid(p5);\r\n    // flags to reduce time complexities\r\n    this.place = this.empty;\r\n    this.startPlaced = false;\r\n    this.startCoords = [];\r\n    this.endPlaced = false;\r\n    this.endCoords = [];\r\n    this.animated = false;\r\n    this.iPrev = 0;\r\n    this.jPrev = 0;\r\n    // p5.frameRate(1);\r\n  };\r\n\r\n  // function to initialize the maze and the grid\r\n  initGrid(p5) {\r\n    this.graph = [];\r\n    for (let i = 0; i < this.mazeHeight; i++) {\r\n      var row = [];\r\n      for (let j = 0; j < this.mazeWidth; j++) {\r\n        if (\r\n          i === 0 ||\r\n          j === 0 ||\r\n          i === this.mazeHeight - 1 ||\r\n          j === this.mazeWidth - 1\r\n        ) {\r\n          row.push(3);\r\n          p5.fill(0, 0, 0);\r\n        } else {\r\n          p5.fill(255);\r\n          row.push(0);\r\n        }\r\n        p5.rect(\r\n          this.mazeWidthUnit * j,\r\n          this.mazeHeightUnit * i,\r\n          this.mazeWidthUnit,\r\n          this.mazeHeightUnit\r\n        );\r\n      }\r\n      this.graph.push(row);\r\n    }\r\n  }\r\n\r\n  // function to calculate the index on the grid from the x and y coordinate on the screen\r\n  calculateIndex = (X, Y) => {\r\n    let j = parseInt(X / this.mazeWidthUnit);\r\n    let i = parseInt(Y / this.mazeHeightUnit);\r\n    return [i, j];\r\n  };\r\n\r\n  // function to colour a box with a given index and colour\r\n  colourBox = (p5, index, fillValue) => {\r\n    let i = index[0],\r\n      j = index[1];\r\n    if (typeof fillValue === \"number\") {\r\n      p5.fill(fillValue);\r\n    } else {\r\n      p5.fill(fillValue[0], fillValue[1], fillValue[2]);\r\n    }\r\n    p5.rect(\r\n      this.mazeWidthUnit * j,\r\n      this.mazeHeightUnit * i,\r\n      this.mazeWidthUnit,\r\n      this.mazeHeightUnit\r\n    );\r\n  };\r\n\r\n  empty = () => {};\r\n\r\n  // function to place the start on click\r\n  placeStartOnClick = p5 => {\r\n    let index = this.calculateIndex(p5.mouseX, p5.mouseY);\r\n    if (\r\n      index[0] < this.mazeHeight &&\r\n      index[0] >= 0 &&\r\n      index[1] < this.mazeWidth &&\r\n      index[1] >= 0\r\n    ) {\r\n      if (this.graph[index[0]][index[1]] === 0) {\r\n        if (!this.startPlaced) {\r\n          this.graph[index[0]][index[1]] = 1;\r\n          this.colourBox(p5, index, [60, 0, 255]);\r\n          this.startPlaced = true;\r\n          this.startCoords = index;\r\n        } else {\r\n          // TODO: can make like a popup which says start has already been placed\r\n        }\r\n      } else if (this.startPlaced) {\r\n        if (this.graph[index[0]][index[1]] === 1) {\r\n          this.graph[index[0]][index[1]] = 0;\r\n          this.colourBox(p5, index, 255);\r\n          this.startPlaced = false;\r\n          this.startCoords = [];\r\n        }\r\n      }\r\n    }\r\n    this.place = this.empty;\r\n  };\r\n\r\n  // function to place the end on click\r\n  placeEndOnClick = p5 => {\r\n    let index = this.calculateIndex(p5.mouseX, p5.mouseY);\r\n    if (\r\n      index[0] < this.mazeHeight &&\r\n      index[0] >= 0 &&\r\n      index[1] < this.mazeWidth &&\r\n      index[1] >= 0\r\n    ) {\r\n      if (this.graph[index[0]][index[1]] === 0) {\r\n        if (!this.endPlaced) {\r\n          this.graph[index[0]][index[1]] = 4;\r\n          this.colourBox(p5, index, [255, 25, 33]);\r\n          this.endPlaced = true;\r\n          this.endCoords = index;\r\n        } else {\r\n          // TODO: can make like a popup which says start has already been placed\r\n        }\r\n      } else if (this.endPlaced) {\r\n        if (this.graph[index[0]][index[1]] === 4) {\r\n          this.graph[index[0]][index[1]] = 0;\r\n          this.colourBox(p5, index, 255);\r\n          this.endPlaced = false;\r\n          this.endCoords = [];\r\n        }\r\n      }\r\n    }\r\n    this.place = this.empty;\r\n  };\r\n\r\n  // function to place maze wall\r\n  // used in the maze generation algorithms\r\n  placeMazeWall = (p5, index) => {\r\n    if (this.graph[index[0]][index[1]] === 0) {\r\n      this.graph[index[0]][index[1]] = 2;\r\n      this.colourBox(p5, index, [47, 56, 56]);\r\n    } else if (this.graph[index[0]][index[1]] === 2) {\r\n      this.graph[index[0]][index[1]] = 0;\r\n      this.colourBox(p5, index, 255);\r\n    }\r\n  };\r\n\r\n  // function to place maze wall on click\r\n  placeMazeWallOnClick = p5 => {\r\n    let index = this.calculateIndex(p5.mouseX, p5.mouseY);\r\n\r\n    if (\r\n      index[0] < this.mazeHeight &&\r\n      index[0] >= 0 &&\r\n      index[1] < this.mazeWidth &&\r\n      index[1] >= 0\r\n    ) {\r\n      this.placeMazeWall(p5, index);\r\n    }\r\n\r\n    this.place = this.empty;\r\n  };\r\n\r\n  // function to place a weighted node on click\r\n  placeWeightOnClick = p5 => {\r\n    let index = this.calculateIndex(p5.mouseX, p5.mouseY);\r\n\r\n    if (\r\n      index[0] < this.mazeHeight &&\r\n      index[0] >= 0 &&\r\n      index[1] < this.mazeWidth &&\r\n      index[1] >= 0\r\n    ) {\r\n      if (this.graph[index[0]][index[1]] === 0) {\r\n        this.graph[index[0]][index[1]] = 5;\r\n        this.colourBox(p5, index, [115, 10, 108]);\r\n      } else if (this.graph[index[0]][index[1]] === 5) {\r\n        this.graph[index[0]][index[1]] = 0;\r\n        this.colourBox(p5, index, 255);\r\n      }\r\n    }\r\n\r\n    this.place = this.empty;\r\n  };\r\n\r\n  // function to animate the finding of path from start to end nodes\r\n  animatePathFinding = (p5, order, colour1, colour2) => {\r\n    p5.frameRate(1);\r\n    for (let i = 1; i < order.length - 1; i++) {\r\n      setTimeout(() => {\r\n        if (this.graph[order[i][0]][order[i][1]] === 0) {\r\n          this.colourBox(p5, order[i], colour1);\r\n        } else {\r\n          this.colourBox(p5, order[i], colour2);\r\n        }\r\n      }, 0);\r\n    }\r\n    p5.frameRate(10);\r\n  };\r\n\r\n  // function to animate the placing of mazes and update the grid array\r\n  animateMazeWalls = (p5, order) => {\r\n    this.clearSketch(p5);\r\n    for (let i = 0; i < order.length; i++) {\r\n      setTimeout(() => {\r\n        this.placeMazeWall(p5, order[i]);\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n  // function to clear the animation effects\r\n  clearAnimation = p5 => {\r\n    for (let i = 0; i < this.graph.length; i++) {\r\n      for (let j = 0; j < this.graph[0].length; j++) {\r\n        if (this.graph[i][j] === 0) {\r\n          this.colourBox(p5, [i, j], 255);\r\n        }\r\n        if (this.graph[i][j] === 5) {\r\n          this.colourBox(p5, [i, j], [255, 0, 255]);\r\n        }\r\n      }\r\n    }\r\n    this.animated = false;\r\n  };\r\n\r\n  // function to clear the entire grid to scratch\r\n  clearSketch = p5 => {\r\n    this.initGrid(p5);\r\n    this.startPlaced = false;\r\n    this.startCoords = [];\r\n    this.endPlaced = false;\r\n    this.endCoords = [];\r\n    this.animated = false;\r\n  };\r\n\r\n  // p5js inbuilt method to detect screen touches\r\n  touchStarted = p5 => {\r\n    this.place = this.objectDraw[this.props.object];\r\n  };\r\n  // main draw function\r\n  draw = p5 => {\r\n    this.place(p5);\r\n\r\n    // if navbar communicates to clear entire board\r\n    if (this.props.returnClear()) {\r\n      this.clearSketch(p5);\r\n    }\r\n    // if navbar communicates to clear the animation\r\n    if (this.props.returnClearAnimation()) {\r\n      this.clearAnimation(p5);\r\n    }\r\n    // if navbar communicates to find the path\r\n    if (this.props.returnFindPath()) {\r\n      if (this.animated) {\r\n        this.clearAnimation(p5);\r\n      }\r\n\r\n      if (this.startPlaced && this.endPlaced) {\r\n        this.traversalInfo = PathAlgorithms[this.props.pathAlgorithm](\r\n          this.graph,\r\n          this.startCoords,\r\n          this.endCoords\r\n        );\r\n        if (this.traversalInfo) {\r\n          this.animatePathFinding(\r\n            p5,\r\n            this.traversalInfo.traversalOrder,\r\n            [49, 233, 129],\r\n            [30, 200, 100]\r\n          );\r\n          this.animatePathFinding(\r\n            p5,\r\n            this.traversalInfo.shortestPath,\r\n            [255, 213, 60],\r\n            [180, 150, 40]\r\n          );\r\n          this.props.getDistance(this.traversalInfo.distance);\r\n          this.animated = true;\r\n        }\r\n      } else {\r\n        // TODO: something which says start and end haven't been placed\r\n      }\r\n    }\r\n\r\n    // if the navbar communicates to generate a maze\r\n    if (this.props.returnGenerateMaze()) {\r\n      let mazeOrder = MazeAlgorithms[this.props.mazeAlgorithm](this.graph);\r\n      if (mazeOrder) {\r\n        this.animateMazeWalls(p5, mazeOrder);\r\n      }\r\n    }\r\n  };\r\n\r\n  // main react render method\r\n  render = () => {\r\n    return (\r\n      <Sketch\r\n        setup={this.setup}\r\n        draw={this.draw}\r\n        touchStarted={this.touchStarted}\r\n        className=\"sketch\"\r\n      />\r\n    );\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nexport default class CustomNavbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedObject: \"Select Object\",\r\n      selectedMazeAlgorithm: \"Select Maze Algorithm\",\r\n      selectedPathAlgorithm: \"Select Path Algorithm\"\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <Navbar class=\"navbar navbar-light\" style={{\"background-color\": \"#243150\"}}>\r\n        <div style={{\"margin-left\":\"10px\",\"width\":\"25%\"}}>\r\n          <h3 style={{\"color\":\"white\"}}>PATHFINDING VISUALIZER</h3>\r\n          <p style={{\"color\":\"white\",\"margin-left\":\"105px\",\"margin-bottom\":\"-5px\"}}>MADE BY SHRIKANT BHARDWAJ</p>\r\n        </div>\r\n        <Container>\r\n          <Col>\r\n            <Dropdown className=\"nav-element\" variant=\"light\">\r\n              <Dropdown.Toggle\r\n                className=\"nav-element\"\r\n                variant=\"light\"\r\n                id=\"dropdown-basic\"\r\n              >\r\n                {this.state.selectedObject}\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu className=\"nav-element\">\r\n                {[\"Start\", \"Wall\", \"Weight\", \"End\"].map(object => {\r\n                  return (\r\n                    <Dropdown.Item\r\n                      onClick={() => {\r\n                        this.props.getObject(object.toLowerCase());\r\n                        this.setState({\r\n                          selectedObject: object\r\n                        });\r\n                      }}\r\n                      key={object}\r\n                    >\r\n                      {object}\r\n                    </Dropdown.Item>\r\n                  );\r\n                })}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Col>\r\n\r\n          {/*  */}\r\n          <Col>\r\n            <Dropdown as={ButtonGroup} variant=\"light\" className=\"nav-element\">\r\n              <Button onClick={this.props.generateMaze} variant=\"light\">\r\n                {this.state.selectedMazeAlgorithm}\r\n              </Button>\r\n\r\n              <Dropdown.Toggle\r\n                split\r\n                variant=\"light\"\r\n                id=\"dropdown-split-basic\"\r\n              />\r\n\r\n              <Dropdown.Menu>\r\n                {[\r\n                  \"Randomized Verticals\",\r\n                  \"Randomized Horizontals\",\r\n                  \"Recursive Division\"\r\n                ].map(mazeAlgorithm => {\r\n                  return (\r\n                    <Dropdown.Item\r\n                      key={mazeAlgorithm}\r\n                      onClick={() => {\r\n                        this.props.getMazeAlgorithm(\r\n                          mazeAlgorithm.replace(/ /g, \"\")\r\n                        );\r\n                        this.setState({\r\n                          selectedMazeAlgorithm: mazeAlgorithm\r\n                        });\r\n                      }}\r\n                    >\r\n                      {mazeAlgorithm}\r\n                    </Dropdown.Item>\r\n                  );\r\n                })}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Col>\r\n\r\n          {/*  */}\r\n\r\n          <Col>\r\n            <Dropdown as={ButtonGroup} variant=\"light\" className=\"nav-element\">\r\n              <Button onClick={this.props.findPath} variant=\"light\">\r\n                {this.state.selectedPathAlgorithm}\r\n              </Button>\r\n\r\n              <Dropdown.Toggle\r\n                split\r\n                variant=\"light\"\r\n                id=\"dropdown-split-basic\"\r\n              />\r\n\r\n              <Dropdown.Menu>\r\n                {[\r\n                  \"Breadth First Search\",\r\n                  \"Depth First Search\",\r\n                  \"Dijkstra\",\r\n                  \"Astar\"\r\n                ].map(pathAlgorithm => {\r\n                  return (\r\n                    <Dropdown.Item\r\n                      key={pathAlgorithm}\r\n                      onClick={() => {\r\n                        this.props.getShortPathAlgorithm(\r\n                          pathAlgorithm.replace(/ /g, \"\")\r\n                        );\r\n                        this.setState({\r\n                          selectedPathAlgorithm: pathAlgorithm\r\n                        });\r\n                      }}\r\n                    >\r\n                      {pathAlgorithm}\r\n                    </Dropdown.Item>\r\n                  );\r\n                })}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Button\r\n              variant=\"light\"\r\n              onClick={() => {\r\n                this.props.clearSketch();\r\n              }}\r\n              className=\"nav-element\"\r\n            >\r\n              Clear\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              variant=\"light\"\r\n              onClick={() => {\r\n                this.props.clearAnimation();\r\n              }}\r\n              className=\"nav-element\"\r\n            >\r\n              Clear Animation\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button variant=\"light\" className=\"nav-element\">\r\n              Distance <Badge variant=\"dark\">{this.props.distance}</Badge>\r\n            </Button>\r\n          </Col>\r\n        </Container>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Graph from \"./components/GraphSketch\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import Intro from \"./components/Intro\";\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      object: \"none\",\r\n      mazeAlgorithm: \"none\",\r\n      pathAlgorithm: \"none\",\r\n      distance: 0\r\n    };\r\n    this.getObject = this.getObject.bind(this);\r\n    this.getMazeAlgorithm = this.getMazeAlgorithm.bind(this);\r\n    this.getShortPathAlgorithm = this.getShortPathAlgorithm.bind(this);\r\n    this.clearSketch = this.clearSketch.bind(this);\r\n    this.returnClear = this.returnClear.bind(this);\r\n    this.getDistance = this.getDistance.bind(this);\r\n    this.findPath = this.findPath.bind(this);\r\n    this.returnFindPath = this.returnFindPath.bind(this);\r\n    this.generateMaze = this.generateMaze.bind(this);\r\n    this.returnGenerateMaze = this.returnGenerateMaze.bind(this);\r\n    this.clearAnimation = this.clearAnimation.bind(this);\r\n  }\r\n\r\n  getObject = object => {\r\n    this.setState({ object: object });\r\n  };\r\n  getMazeAlgorithm = mazeAlgorithm => {\r\n    this.setState({ mazeAlgorithm: mazeAlgorithm });\r\n  };\r\n  getShortPathAlgorithm = pathAlgorithm => {\r\n    this.setState({ pathAlgorithm: pathAlgorithm });\r\n  };\r\n\r\n  clearSketch = () => {\r\n    this.setState({ clear: true });\r\n  };\r\n  clearAnimation = () => {\r\n    this.setState({ clearAnimation: true });\r\n  };\r\n  findPath = () => {\r\n    this.setState({ findPath: true });\r\n  };\r\n  generateMaze = () => {\r\n    this.setState({ generateMaze: true });\r\n  };\r\n  returnClearAnimation = () => {\r\n    if (this.state.clearAnimation) {\r\n      this.setState({\r\n        clearAnimation: false\r\n      });\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  returnClear = () => {\r\n    if (this.state.clear) {\r\n      this.setState({\r\n        clear: false,\r\n        distance: 0\r\n      });\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  returnFindPath = () => {\r\n    if (this.state.findPath) {\r\n      this.setState({\r\n        findPath: false\r\n      });\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  returnGenerateMaze = () => {\r\n    if (this.state.generateMaze) {\r\n      this.setState({\r\n        generateMaze: false\r\n      });\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  getDistance = distance => {\r\n    this.setState({ distance: distance });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <Navbar\r\n          getObject={this.getObject}\r\n          getMazeAlgorithm={this.getMazeAlgorithm}\r\n          getShortPathAlgorithm={this.getShortPathAlgorithm}\r\n          clearSketch={this.clearSketch}\r\n          findPath={this.findPath}\r\n          distance={this.state.distance}\r\n          generateMaze={this.generateMaze}\r\n          clearAnimation={this.clearAnimation}\r\n        />\r\n        <Graph\r\n          className=\"center\"\r\n          object={this.state.object}\r\n          mazeAlgorithm={this.state.mazeAlgorithm}\r\n          pathAlgorithm={this.state.pathAlgorithm}\r\n          returnClear={this.returnClear}\r\n          returnFindPath={this.returnFindPath}\r\n          getDistance={this.getDistance}\r\n          returnGenerateMaze={this.returnGenerateMaze}\r\n          returnClearAnimation={this.returnClearAnimation}\r\n        />\r\n        {/* <Intro /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}